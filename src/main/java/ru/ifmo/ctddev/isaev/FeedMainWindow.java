package ru.ifmo.ctddev.isaev;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.sun.syndication.feed.synd.SyndEntry;
import com.sun.syndication.feed.synd.SyndFeed;
import com.sun.syndication.io.SyndFeedInput;
import com.sun.syndication.io.XmlReader;
import ru.zyulyaev.ifmo.net.multicast.api.Feed;
import ru.zyulyaev.ifmo.net.multicast.impl.MulticastMessenger;

import javax.swing.*;
import java.awt.*;
import java.net.URL;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 * @author Ilya Isaev
 */
public class FeedMainWindow {
    private JPanel mainPanel;
    private JButton addFeedButton;
    private JList feedList;
    private JPanel feedChoosePanel;
    private JButton deleteFeedButton;
    private DefaultListModel<RssFeed> listModel = new DefaultListModel<>();
    private MulticastMessenger messenger = ConfiguredMessenger.INSTANCE;
    private final Executor executor = Executors.newFixedThreadPool(5);

    private void regusterFeed(FeedAddPopup addPopup) {
        Future<Feed> feed = messenger.registerFeed(
                addPopup.getFeedNameField().getText(),
                addPopup.getFeedDescriptionField().getText());
        executor.execute(() -> {
            try {
                while (true) {
                    URL feedUrl = null;
                    feedUrl = new URL(addPopup.getFeedUrlField().getText());

                    SyndFeedInput input = new SyndFeedInput();
                    SyndFeed rssFeed = input.build(new XmlReader(feedUrl));
                    rssFeed.getEntries().forEach(o -> {
                        SyndEntry entry = (SyndEntry) o;
                        try {
                            messenger.sendMessage(feed.get(), entry.getTitle().getBytes());
                        } catch (Exception e2) {
                            throw new RuntimeException(e2);
                        }
                    });
                    Thread.sleep(10000);
                }
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }
        });
        try {
            listModel.addElement(new RssFeed(feed.get(), addPopup.getFeedUrlField().getText()));
        } catch (InterruptedException | ExecutionException e2) {
            e2.printStackTrace();
        }
    }

    public FeedMainWindow() {
        new Thread(RssReceiver::new).start();
        addFeedButton.addActionListener(e -> {
            FeedAddPopup addPopup = new FeedAddPopup();
            JFrame frame = new JFrame("FeedMainWindow");
            frame.setContentPane(addPopup.$$$getRootComponent$$$());
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.pack();
            frame.setVisible(true);
            addPopup.getAddButton().addActionListener(e1 -> {
                regusterFeed(addPopup);
                frame.dispose();
            });
        });
        feedList.setModel(listModel);
        deleteFeedButton.addActionListener(e -> {
            int index = feedList.getSelectedIndex();
            if (index != -1) {
                RssFeed feed = listModel.elementAt(index);
                listModel.remove(feedList.getSelectedIndex());
            }
        });
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("FeedMainWindow");
        frame.setContentPane(new FeedMainWindow().mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        SwingUtilities.invokeLater(() -> {
            FeedReceiverForm.main(new String[]{});
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        feedChoosePanel = new JPanel();
        feedChoosePanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(feedChoosePanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addFeedButton = new JButton();
        addFeedButton.setText("Add feed");
        feedChoosePanel.add(addFeedButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        feedChoosePanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        feedList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        feedList.setModel(defaultListModel1);
        scrollPane1.setViewportView(feedList);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        feedChoosePanel.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        deleteFeedButton = new JButton();
        deleteFeedButton.setText("Delete feed");
        feedChoosePanel.add(deleteFeedButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
