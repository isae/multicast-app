package ru.ifmo.ctddev.isaev;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import ru.zyulyaev.ifmo.net.multicast.api.Feed;
import ru.zyulyaev.ifmo.net.multicast.api.Messenger;
import ru.zyulyaev.ifmo.net.multicast.api.Subscription;

import javax.swing.*;
import java.awt.*;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

/**
 * @author Ilya Isaev
 */
public class FeedReceiverForm {
    private JList feedList;
    private JList newsList;
    private JPanel rootPanel;
    private final Messenger messenger = ConfiguredMessenger.INSTANCE;
    private DefaultListModel<Feed> feedListModel = new DefaultListModel<>();
    private DefaultListModel<String> newsListModel = new DefaultListModel<>();
    private Executor excutor = Executors.newSingleThreadExecutor();
    private volatile Subscription currentSubscription;

    public FeedReceiverForm() {
        feedList.setModel(feedListModel);
        newsList.setModel(newsListModel);
        new Thread(() -> {
            Set<Feed> alreadyAdded = new HashSet<>();
            feedList.addListSelectionListener(e -> {
                newsListModel.clear();
                Feed feed = feedListModel.get(feedList.getSelectedIndex());
                if (currentSubscription != null) {
                    currentSubscription.unsubscribe();
                }
                try {
                    currentSubscription = messenger.subscribe(feed,
                            (message, subscription) -> newsListModel.addElement(new String(message))).get();
                } catch (InterruptedException | ExecutionException e1) {
                    throw new RuntimeException(e1);
                }
            });
            try {
                while (true) {
                    messenger.discoverFeeds().get().forEach((feed) -> {
                        if (!alreadyAdded.contains(feed)) {
                            feedListModel.addElement(feed);
                            alreadyAdded.add(feed);
                        }
                    });
                    Thread.sleep(10000);
                }
            } catch (InterruptedException | ExecutionException e) {
                throw new RuntimeException(e);
            }
        }).start();
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("FeedReceiverForm");
        frame.setContentPane(new FeedReceiverForm().rootPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        feedList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        feedList.setModel(defaultListModel1);
        scrollPane1.setViewportView(feedList);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        panel2.add(scrollPane2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        newsList = new JList();
        final DefaultListModel defaultListModel2 = new DefaultListModel();
        newsList.setModel(defaultListModel2);
        scrollPane2.setViewportView(newsList);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
